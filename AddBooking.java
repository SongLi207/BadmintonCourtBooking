
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author USER
 */
import javax.swing.*;
import java.util.*;
public class AddBooking extends javax.swing.JFrame {
    private UserAuth auth;
    private BookingList bookingList;
    private boolean isUpdateMode = false; // Flag to determine whether to update
    private String idUpdate; // Save the booking ID to be update (if any)
    /**
     * Creates new form AddBooking
     */
    public AddBooking(UserAuth auth, BookingList bookingList) {
        this.auth = auth;
        this.bookingList = bookingList;
        initComponents();
        nameL.setText(auth.getCurrentUser().getUsername()); // Set login user's name
    }

    public AddBooking(UserAuth auth, Booking booking, BookingList bookingList) {
        this.auth = auth;
        this.bookingList = bookingList;
        this.isUpdateMode = true; // Activate update mode
        this.idUpdate = booking.getId();
        initComponents();
        nameL.setText(auth.getCurrentUser().getUsername());
        
        // Prefill form fields using existing booking
        daysCB.setSelectedItem(booking.getDays());
        startTimeCB.setSelectedItem(booking.getStartTime());
        endTimeCB.setSelectedItem(booking.getEndTime());
        durationTF.setText(String.valueOf(booking.getDuration()));
        courtCB.setSelectedItem(String.valueOf(booking.getCourtNum()));
        
        //Replace addBtn text to "Update" and hide Reset
        addBtn.setText("Update");
        resetBtn.setVisible(false);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        startTimeCB = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        endTimeCB = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        durationTF = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        courtCB = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        daysCB = new javax.swing.JComboBox<>();
        nameL = new javax.swing.JLabel();
        addBtn = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("STKaiti", 1, 24)); // NOI18N
        jLabel1.setText("Booking");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Name:");

        jLabel3.setText("Start Time:");

        startTimeCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "08:00 a.m", "09:00 a.m", "10:00 a.m", "11:00 a.m", "12:00 p.m", "01:00 p.m.", "02:00 p.m.", "03:00 p.m.", "04:00 p.m.", "05:00 p.m.", "06:00 p.m.", "07:00 p.m.", "08:00 p.m.", "09:00 p.m.", "10:00 p.m.", "11:00 p.m." }));
        startTimeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTimeCBActionPerformed(evt);
            }
        });

        jLabel4.setText("End Time:");

        endTimeCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "08:00 a.m", "09:00 a.m", "10:00 a.m", "11:00 a.m", "12:00 p.m", "01:00 p.m.", "02:00 p.m.", "03:00 p.m.", "04:00 p.m.", "05:00 p.m.", "06:00 p.m.", "07:00 p.m.", "08:00 p.m.", "09:00 p.m.", "10:00 p.m.", "11:00 p.m.", " " }));

        jLabel5.setText("Duration:");

        jLabel6.setText("Court:");

        courtCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5" }));

        jLabel7.setText("Days:");

        daysCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(startTimeCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(endTimeCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(durationTF)
                    .addComponent(courtCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(daysCB, 0, 141, Short.MAX_VALUE)
                    .addComponent(nameL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nameL, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(daysCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(startTimeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(endTimeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(durationTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(courtCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        resetBtn.setText("Reset");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(addBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(cancelBtn)
                .addGap(36, 36, 36))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancelBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(25, 25, 25))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // Back to BookingCourt page
    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        int confirn = JOptionPane.showConfirmDialog(this, 
            isUpdateMode? "Cancel update this booking?" : "Cancel booking?", 
            "Cancel Confrimation", JOptionPane.YES_NO_OPTION);
        if (confirn == JOptionPane.YES_OPTION){
            dispose();
            new BookingCourt(auth, bookingList).setVisible(true);
        }
    }//GEN-LAST:event_cancelBtnActionPerformed
     // Reset the form to default
    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        daysCB.setSelectedIndex(0);
        startTimeCB.setSelectedIndex(0);
        endTimeCB.setSelectedIndex(0);
        durationTF.setText("");
        courtCB.setSelectedIndex(0);
    }//GEN-LAST:event_resetBtnActionPerformed
    
    // Add or Update Booking with validation and exception handling
    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        String confrimMsg = isUpdateMode? "Do you want to update this booking." : "Do you want to add this booking.";
        int option = JOptionPane.showConfirmDialog(this, confrimMsg, "Confirmation", JOptionPane.OK_CANCEL_OPTION);
        if(option == JOptionPane.OK_OPTION){
            try{
                String id = isUpdateMode? idUpdate : "BB" + (bookingList.getList().size() + 1);
                String name = auth.getCurrentUser().getUsername();
                String days = (String)daysCB.getSelectedItem();
                String startTime = (String)startTimeCB.getSelectedItem();
                String endTime = (String)endTimeCB.getSelectedItem();
                int duration = Integer.parseInt(durationTF.getText().trim());
                int courtNum = Integer.parseInt((String)courtCB.getSelectedItem());

                // Check validate
                if (duration == 0){
                    JOptionPane.showMessageDialog(this, "All fields must be filled!", "Input Error", JOptionPane.ERROR_MESSAGE);
                }
                
                if (duration < 1) {
                    throw new IllegalArgumentException ("Duration must be positive.");
                }
                
                if (startTimeCB.getSelectedIndex() >= endTimeCB.getSelectedIndex()){
                    JOptionPane.showMessageDialog(this, "Start time must be before end time.", "Time Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                // Check the available of the court and if updated ignore this booking
                boolean available = bookingList.checkCourt(days, startTime, endTime, courtNum, isUpdateMode ? idUpdate : "");
                if(!available){
                    JOptionPane.showMessageDialog(this, "This court is already booked at that time.", "Booking conflict", JOptionPane.WARNING_MESSAGE);
                    return;
                }                
                // Create booking and add or update in list
                Booking booking = new Booking (id,name,startTime, endTime, days, courtNum, duration, 0);
                
                // Delete old booking only when updating
                if(isUpdateMode){
                    for(int i = 0; i < bookingList.getList().size(); i++){
                        if(bookingList.getList().get(i).getId().equals(id)){
                            bookingList.getList().remove(i);
                        }
                    }
                }
                bookingList.addBooking(booking); // Add new or updated booking
                // Prepare success message based on operation (add or update)
                String resultMsg = isUpdateMode? "Booking updated Successfully!" : "Booking Successfully!";
                resultMsg += "\nBooking ID: " + id + "\nTotal Price: RM" + booking.getPrice();        
                JOptionPane.showMessageDialog(this, resultMsg, "Success", JOptionPane.INFORMATION_MESSAGE);
                // Return to BookingCourt page
                dispose();
                new BookingCourt(auth, bookingList).setVisible(true);
                
            } catch (InputMismatchException e){
                JOptionPane.showMessageDialog(this, "Duration must be a number.", "Input Error", JOptionPane.ERROR_MESSAGE);
            } catch (IllegalArgumentException e){
                JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            return;
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void startTimeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTimeCBActionPerformed

    }//GEN-LAST:event_startTimeCBActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JComboBox<String> courtCB;
    private javax.swing.JComboBox<String> daysCB;
    private javax.swing.JTextField durationTF;
    private javax.swing.JComboBox<String> endTimeCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel nameL;
    private javax.swing.JButton resetBtn;
    private javax.swing.JComboBox<String> startTimeCB;
    // End of variables declaration//GEN-END:variables
}
