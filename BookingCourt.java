/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author USER
 */
import javax.swing.*;
public class BookingCourt extends javax.swing.JFrame {
    private UserAuth auth;
    private BookingList bookingList;
    /**
     * Creates new form BookingCourt
     */
    public BookingCourt(UserAuth auth, BookingList bookingList) {
        this.auth = auth;
        this.bookingList = bookingList;
        bookingList.readFile(); // Load booking records from file
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        bookingBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Booking Court Page");

        jLabel1.setFont(new java.awt.Font("STKaiti", 1, 24)); // NOI18N
        jLabel1.setText("Booking Court");

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        bookingBtn.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        bookingBtn.setText("Booking");
        bookingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookingBtnActionPerformed(evt);
            }
        });

        updateBtn.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        backBtn.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bookingBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(updateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(backBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(62, 62, 62))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookingBtn)
                    .addComponent(updateBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteBtn)
                    .addComponent(backBtn))
                .addGap(28, 28, 28))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(130, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(126, 126, 126))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(17, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(17, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addContainerGap(193, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(62, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(16, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    // Opens the AddBooking form to create a new booking
    private void bookingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookingBtnActionPerformed
        dispose();
        new AddBooking(auth, bookingList).setVisible(true);
    }//GEN-LAST:event_bookingBtnActionPerformed
    
    //Opens the AddBooking form to update a booking only if user owns the booking
    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        String currentUser = auth.getCurrentUser().getUsername();
        boolean hasBook = false; // check if user has bookings
        for(Booking b : bookingList.getList()){
            if(b.getName().equals(currentUser)){
                hasBook = true;
                break;
            }
        }
        
        if(!hasBook){
            JOptionPane.showMessageDialog(this, "You have no bookings yet.", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        // Display user to enter Booking ID to update
        String id = JOptionPane.showInputDialog(this, "Enter Booking ID to Update:");
        Booking update = null;
        // Find the booking by ID and owner name
        for(Booking b : bookingList.getList()){
            if(b.getId().equals(id) && b.getName().equals(currentUser)){
                update = b;
                break;
            }
        }
        // Show current bookings if ID not found
        if(update == null){
            String booking = "Booking ID not found. \nCurrent Booking:\n";
            for(Booking b : bookingList.getList()){
                if(b.getName().equals(currentUser)){
                   booking += b.toString() + "\n"; 
                }
            }
            JOptionPane.showMessageDialog(this, booking, "Booking List:", JOptionPane.INFORMATION_MESSAGE);
            return;
        } else {
            // Pass existing booking to AddBooking form
            dispose();
            new AddBooking(auth,update, bookingList).setVisible(true);
        }   
    }//GEN-LAST:event_updateBtnActionPerformed
    
    //Delete a booking owned by the current user by ID
    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        String currentUser = auth.getCurrentUser().getUsername();
        boolean hasBook = false;
        // Check if user has bookings
        for(Booking b : bookingList.getList()){
            if(b.getName().equals(currentUser)){
                hasBook = true;
                break;
            }
        }
        if(!hasBook){
            JOptionPane.showMessageDialog(this, "You have no bookings yet.", "Info", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
         // Display user for Booking ID to delete
        String id = JOptionPane.showInputDialog(this, "Enter Booking ID to delete:");
        boolean deleted = false;
        // Search and remove booking if found and owned by user
        for (int i =0; i < bookingList.getList().size(); i++){
            Booking b = bookingList.getList().get(i);
            if(b.getId().equals(id) && b.getName().equals(currentUser)){
                bookingList.getList().remove(i); // Remove booking
                bookingList.saveToFile(); // Save updated list to file
                JOptionPane.showMessageDialog(this, "Booking ID " + id + " has been delete.");
                deleted = true;
                break;
            }
        }
        // Show current bookings if booking not found
        if(!deleted){
            String booking = "Booking ID not found. \nCurrent Booking:\n";
            for(Booking b : bookingList.getList()){
                if(b.getName().equals(currentUser)){
                    booking += b.toString() + "\n";
                }     
            }
            JOptionPane.showMessageDialog(this, booking, "Booking List:", JOptionPane.INFORMATION_MESSAGE);
            return;
        } 
    }//GEN-LAST:event_deleteBtnActionPerformed
    
    // Returns to the main page (BadmintonBookingSystem)
    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        int confirn = JOptionPane.showConfirmDialog(this, "Back to the Main Page?", 
        "Confirn Page", JOptionPane.YES_NO_OPTION);
        if (confirn == JOptionPane.YES_OPTION){
            dispose();
            new BadmintonBookingSystem(auth, bookingList).setVisible(true);
        }
    }//GEN-LAST:event_backBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton bookingBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
